#!/usr/bin/env node

/**
 * Script to automatically generate a list of Ethereum addresses that have profile pages
 * This script scans for directories in packages/nextjs/app/builders/ that:
 * 1. Have a name that looks like an Ethereum address (0x...)
 * 2. Contain a page.tsx or page.js file (i.e., a Next.js page component)
 * 
 * It then generates a TypeScript file with an exported array of these addresses.
 */

const fs = require('fs');
const path = require('path');

// Paths are relative to the root of the project
const BUILDERS_DIR = path.join(__dirname, '..', 'app', 'builders');
const OUTPUT_FILE = path.join(__dirname, '..', 'generated', 'existingBuilderProfiles.ts');

// Ensure the generated directory exists
const GENERATED_DIR = path.dirname(OUTPUT_FILE);
if (!fs.existsSync(GENERATED_DIR)) {
    console.log(`Creating directory: ${GENERATED_DIR}`);
    fs.mkdirSync(GENERATED_DIR, { recursive: true });
}

// Regular expression for Ethereum addresses
const ETH_ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;

/**
 * Checks if a directory name looks like an Ethereum address and contains a page component
 */
function isBuilderProfileDirectory(dirName) {
    // Check if directory name matches Ethereum address format
    if (!ETH_ADDRESS_REGEX.test(dirName)) {
        return false;
    }

    // Check if directory contains a page.tsx or page.js file
    const dirPath = path.join(BUILDERS_DIR, dirName);
    const stat = fs.statSync(dirPath);

    if (!stat.isDirectory()) {
        return false;
    }

    return (
        fs.existsSync(path.join(dirPath, 'page.tsx')) ||
        fs.existsSync(path.join(dirPath, 'page.js'))
    );
}

/**
 * Main function to scan directories and generate the TypeScript file
 */
function generateProfilesList() {
    try {
        // Read builder directories
        const items = fs.readdirSync(BUILDERS_DIR);

        // Filter directories that contain profile pages
        const builderAddresses = items.filter(isBuilderProfileDirectory);

        if (builderAddresses.length === 0) {
            console.log('No builder profile pages found.');
        } else {
            console.log(`Found ${builderAddresses.length} builder profile pages.`);
        }

        // Generate TypeScript content
        const tsContent = `// THIS FILE IS AUTO-GENERATED BY scripts/generate-existing-profiles.js
// DO NOT EDIT MANUALLY!
// Last generated: ${new Date().toISOString()}

import { Address } from "viem";

/**
 * Array of builder addresses that have profile pages
 * This is used to conditionally render profile links in the builders list
 */
export const existingBuilderProfiles: Address[] = [
  ${builderAddresses.map(addr => `"${addr}"`).join(',\n  ')}
];
`;

        // Write to file
        fs.writeFileSync(OUTPUT_FILE, tsContent);
        console.log(`Generated file: ${OUTPUT_FILE}`);

        return true;
    } catch (error) {
        console.error('Error generating profiles list:', error);
        return false;
    }
}

// Run the generator
const success = generateProfilesList();
process.exit(success ? 0 : 1); 